# Generated by Django 5.1.2 on 2024-11-01 19:27

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import src.validators.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы и пробел",
                                regex="^[а-яА-ЯёЁa-zA-Z]+(?:\\s[а-яА-ЯёЁa-zA-Z]+)*$",
                            )
                        ],
                        verbose_name="Категория",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория",
                "verbose_name_plural": "Категории",
                "db_table": "category",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="название",
                    ),
                ),
                ("code", models.IntegerField(verbose_name="код")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="описание",
                    ),
                ),
            ],
            options={
                "verbose_name": "право",
                "verbose_name_plural": "права",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Введите название роли до 20 символов(допускаются только буквы кириллицы и латиницы.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="название",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        help_text="Введите цвет в формате 6 цифр.",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_color",
                                message="Цвет должен состоять из 6 цифр.",
                                regex="^\\d{6}$",
                            )
                        ],
                        verbose_name="цвет",
                    ),
                ),
            ],
            options={
                "verbose_name": "роль",
                "verbose_name_plural": "роли",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="имя",
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="фамилия",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="email",
                    ),
                ),
                (
                    "tg_name",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="tg имя",
                    ),
                ),
                (
                    "tg_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="tg ник",
                    ),
                ),
                (
                    "google_meet_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="googlemeet ник",
                    ),
                ),
                (
                    "gitlab_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="gitlab ник",
                    ),
                ),
                (
                    "github_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Допускаются только буквы, цифры и спец.символы без пробела",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="github ник",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="avatars/",
                        verbose_name="аватар",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="активный статус",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="статус администратора",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False, verbose_name="суперпользователь"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, verbose_name="персонал"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "permissions",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="models.permission",
                        verbose_name="права",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="models.role",
                        verbose_name="роль",
                    ),
                ),
            ],
            options={
                "verbose_name": "пользователь",
                "verbose_name_plural": "пользователи",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="CustomUserList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "registration_date",
                    models.DateField(
                        auto_now_add=True, verbose_name="дата создания"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "пользовательский список",
                "verbose_name_plural": "пользовательские списки",
            },
        ),
        migrations.CreateModel(
            name="Meet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            src.validators.validators.ModelValidator.validate_letters_space_only
                        ],
                        verbose_name="Название",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Дата"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="author_meets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Автор",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="models.category",
                        verbose_name="Категория",
                    ),
                ),
                (
                    "responsible",
                    models.ForeignKey(
                        default=models.ForeignKey(
                            null=True,
                            on_delete=django.db.models.deletion.CASCADE,
                            related_name="author_meets",
                            to=settings.AUTH_USER_MODEL,
                            verbose_name="Автор",
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responsible_meets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Ответственный",
                    ),
                ),
            ],
            options={
                "verbose_name": "Мит",
                "verbose_name_plural": "Миты",
                "db_table": "meets",
                "ordering": ["start_time", "category", "title"],
            },
        ),
        migrations.CreateModel(
            name="MeetParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PRESENT", "Присутствует"),
                            ("ABSENT", "Отсутствует"),
                            ("WARNED", "Предупредил"),
                        ],
                        default="PRESENT",
                        max_length=10,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "custom_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="custom_meets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Участник",
                    ),
                ),
                (
                    "meet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="models.meet",
                        verbose_name="Мит",
                    ),
                ),
            ],
            options={
                "verbose_name": "Участник мита",
                "verbose_name_plural": "Участники мита",
                "db_table": "custom_user_meet",
                "unique_together": {("meet", "custom_user")},
            },
        ),
        migrations.AddField(
            model_name="meet",
            name="participants",
            field=models.ManyToManyField(
                related_name="meets",
                through="models.MeetParticipant",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Участники",
            ),
        ),
    ]
