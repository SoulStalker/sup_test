version: '3.8'
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./api:/app/api
    env_file:
      - api/.env
    environment:
      DB_ENGINE: ${DB_ENGINE}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    command:
      - poetry run python manage.py runserver 0.0.0.0:8000
    depends_on:
      - db
      - redis
      - celery
    ports:
      - "8000:8000"

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
    command: poetry run celery -A src.services.celery worker --loglevel=info
    depends_on:
      - redis
    volumes:
      - ./api:/app/api

volumes:
  postgres_data: